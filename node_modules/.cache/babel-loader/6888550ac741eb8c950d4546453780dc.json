{"ast":null,"code":"var _jsxFileName = \"/home/bamberg/Trivia-Redux/src/Pages/Login.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setUser as setUserAction, getTokenApi as getTokenApiAction } from '../Actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.canBeSubmitted = this.canBeSubmitted.bind(this);\n    this.handleSettingsButton = this.handleSettingsButton.bind(this);\n    this.handlePlayButton = this.handlePlayButton.bind(this);\n  }\n\n  componentDidMount() {\n    const getToken = this.props.getToken;\n    getToken();\n  }\n\n  handleChange({\n    target\n  }) {\n    const value = target.value,\n          name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handlePlayButton() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          history = _this$props.history,\n          setUser = _this$props.setUser;\n    setUser(this.state);\n    localStorage.setItem('token', token);\n    history.push('/trivia');\n  }\n\n  handleSettingsButton() {\n    const history = this.props.history;\n    history.push('/settings');\n  }\n\n  canBeSubmitted() {\n    const _this$state = this.state,\n          email = _this$state.email,\n          name = _this$state.name;\n    const emailValidInput = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    if (email.match(emailValidInput) && name.length > 0) {\n      return true;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"input-player-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Nome:\", React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"input-player-name\",\n      placeholder: \"Insira seu nome\",\n      name: \"name\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"input-gravatar-email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Email:\", React.createElement(\"input\", {\n      type: \"email\",\n      \"data-testid\": \"input-gravatar-email\",\n      placeholder: \"Insira seu email\",\n      name: \"email\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      \"data-testid\": \"btn-play\",\n      disabled: !this.canBeSubmitted(),\n      onClick: this.handlePlayButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Jogar\"), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      onClick: this.handleSettingsButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Settings\"));\n  }\n\n}\n\nLogin.propTypes = {\n  setUser: PropTypes.func.isRequired,\n  getToken: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired\n};\n\nconst mapStateToProps = ({\n  trivia: {\n    token\n  }\n}) => ({\n  token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getToken: token => dispatch(getTokenApiAction(token)),\n  setUser: user => dispatch(setUserAction(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/bamberg/Trivia-Redux/src/Pages/Login.js"],"names":["React","Component","connect","PropTypes","setUser","setUserAction","getTokenApi","getTokenApiAction","Login","constructor","props","state","name","email","handleChange","bind","canBeSubmitted","handleSettingsButton","handlePlayButton","componentDidMount","getToken","target","value","setState","token","history","localStorage","setItem","push","emailValidInput","match","length","render","propTypes","func","isRequired","string","shape","mapStateToProps","trivia","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { setUser as setUserAction, getTokenApi as getTokenApiAction } from '../Actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      email: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.canBeSubmitted = this.canBeSubmitted.bind(this);\n    this.handleSettingsButton = this.handleSettingsButton.bind(this);\n    this.handlePlayButton = this.handlePlayButton.bind(this);\n  }\n\n  componentDidMount() {\n    const { getToken } = this.props;\n\n    getToken();\n  }\n\n  handleChange({ target }) {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handlePlayButton() {\n    const { token, history, setUser } = this.props;\n\n    setUser(this.state);\n\n    localStorage.setItem('token', token);\n    history.push('/trivia');\n  }\n\n  handleSettingsButton() {\n    const { history } = this.props;\n\n    history.push('/settings');\n  }\n\n  canBeSubmitted() {\n    const { email, name } = this.state;\n    const emailValidInput = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    if (email.match(emailValidInput) && name.length > 0) {\n      return true;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"input-player-name\">\n          Nome:\n          <input\n            type=\"text\"\n            data-testid=\"input-player-name\"\n            placeholder=\"Insira seu nome\"\n            name=\"name\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"input-gravatar-email\">\n          Email:\n          <input\n            type=\"email\"\n            data-testid=\"input-gravatar-email\"\n            placeholder=\"Insira seu email\"\n            name=\"email\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          type=\"submit\"\n          data-testid=\"btn-play\"\n          disabled={ !this.canBeSubmitted() }\n          onClick={ this.handlePlayButton }\n        >\n          Jogar\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ this.handleSettingsButton }\n        >\n          Settings\n        </button>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  setUser: PropTypes.func.isRequired,\n  getToken: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapStateToProps = ({ trivia: { token } }) => ({\n  token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: (token) => dispatch(getTokenApiAction(token)),\n  setUser: (user) => dispatch(setUserAction(user)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}
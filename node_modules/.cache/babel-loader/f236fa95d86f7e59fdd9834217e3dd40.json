{"ast":null,"code":"var _jsxFileName = \"/home/bamberg/Trivia-Redux/src/Components/Header.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst CryptoJS = require('crypto-js');\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchAvatar = this.fetchAvatar.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          name = _this$props.name,\n          score = _this$props.score,\n          email = _this$props.email,\n          assertions = _this$props.assertions;\n    const player = {\n      name,\n      score,\n      gravatarEmail: email,\n      assertions\n    };\n    localStorage.setItem('state', JSON.stringify({\n      player\n    }));\n  }\n\n  fetchAvatar() {\n    const email = this.props.email;\n    const hashGerada = CryptoJS.MD5(email).toString();\n    const fetchApi = `https://www.gravatar.com/avatar/${hashGerada}`;\n    return fetchApi;\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          name = _this$props2.name,\n          score = _this$props2.score;\n    return React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      \"data-testid\": \"header-profile-picture\",\n      src: this.fetchAvatar(),\n      alt: \"Foto de perfil do Usuario\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      \"data-testid\": \"header-player-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, name), React.createElement(\"p\", {\n      \"data-testid\": \"header-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, score));\n  }\n\n}\n\nconst mapStateToProps = ({\n  user: {\n    email,\n    name\n  },\n  trivia: {\n    points,\n    assertions\n  }\n}) => ({\n  email,\n  name,\n  score: points,\n  assertions\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired\n};\nexport default connect(mapStateToProps)(Header);","map":{"version":3,"sources":["/home/bamberg/Trivia-Redux/src/Components/Header.js"],"names":["React","PropTypes","connect","CryptoJS","require","Header","Component","constructor","props","fetchAvatar","bind","componentDidMount","name","score","email","assertions","player","gravatarEmail","localStorage","setItem","JSON","stringify","hashGerada","MD5","toString","fetchApi","render","mapStateToProps","user","trivia","points","propTypes","string","isRequired","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AAEA,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,wBACyB,KAAKH,KAD9B;AAAA,UACVI,IADU,eACVA,IADU;AAAA,UACJC,KADI,eACJA,KADI;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,UADV,eACUA,UADV;AAElB,UAAMC,MAAM,GAAG;AAAEJ,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeI,MAAAA,aAAa,EAAEH,KAA9B;AAAqCC,MAAAA;AAArC,KAAf;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA;AAAF,KAAf,CAA9B;AACD;;AAEDP,EAAAA,WAAW,GAAG;AAAA,UACJK,KADI,GACM,KAAKN,KADX,CACJM,KADI;AAEZ,UAAMQ,UAAU,GAAGnB,QAAQ,CAACoB,GAAT,CAAaT,KAAb,EAAoBU,QAApB,EAAnB;AAEA,UAAMC,QAAQ,GAAK,mCAAkCH,UAAW,EAAhE;AAEA,WAAOG,QAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,yBACiB,KAAKlB,KADtB;AAAA,UACCI,IADD,gBACCA,IADD;AAAA,UACOC,KADP,gBACOA,KADP;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,qBAAY,wBADd;AAEE,MAAA,GAAG,EAAG,KAAKJ,WAAL,EAFR;AAGE,MAAA,GAAG,EAAC,2BAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAG,qBAAY,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCG,IAAtC,CANF,EAOE;AAAG,qBAAY,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCC,KAAhC,CAPF,CADF;AAWD;;AAnCkC;;AAsCrC,MAAMc,eAAe,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEd,IAAAA,KAAF;AAASF,IAAAA;AAAT,GAAR;AAAyBiB,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAF;AAAUf,IAAAA;AAAV;AAAjC,CAAD,MAAgE;AACtFD,EAAAA,KADsF;AAEtFF,EAAAA,IAFsF;AAGtFC,EAAAA,KAAK,EAAEiB,MAH+E;AAItFf,EAAAA;AAJsF,CAAhE,CAAxB;;AAOAV,MAAM,CAAC0B,SAAP,GAAmB;AACjBjB,EAAAA,KAAK,EAAEb,SAAS,CAAC+B,MAAV,CAAiBC,UADP;AAEjBrB,EAAAA,IAAI,EAAEX,SAAS,CAAC+B,MAAV,CAAiBC,UAFN;AAGjBpB,EAAAA,KAAK,EAAEZ,SAAS,CAACiC,MAAV,CAAiBD,UAHP;AAIjBlB,EAAAA,UAAU,EAAEd,SAAS,CAACiC,MAAV,CAAiBD;AAJZ,CAAnB;AAOA,eAAe/B,OAAO,CAACyB,eAAD,CAAP,CAAyBtB,MAAzB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst CryptoJS = require('crypto-js');\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAvatar = this.fetchAvatar.bind(this);\n  }\n\n  componentDidMount() {\n    const { name, score, email, assertions } = this.props;\n    const player = { name, score, gravatarEmail: email, assertions };\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  fetchAvatar() {\n    const { email } = this.props;\n    const hashGerada = CryptoJS.MD5(email).toString();\n\n    const fetchApi = (`https://www.gravatar.com/avatar/${hashGerada}`);\n\n    return fetchApi;\n  }\n\n  render() {\n    const { name, score } = this.props;\n    return (\n      <header>\n        <img\n          data-testid=\"header-profile-picture\"\n          src={ this.fetchAvatar() }\n          alt=\"Foto de perfil do Usuario\"\n        />\n        <p data-testid=\"header-player-name\">{ name }</p>\n        <p data-testid=\"header-score\">{ score }</p>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user: { email, name }, trivia: { points, assertions } }) => ({\n  email,\n  name,\n  score: points,\n  assertions,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n"]},"metadata":{},"sourceType":"module"}
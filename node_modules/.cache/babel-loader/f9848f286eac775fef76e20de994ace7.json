{"ast":null,"code":"var _jsxFileName = \"/home/bamberg/Trivia-Redux/src/Pages/Trivia.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header';\nimport { fetchQuestions } from '../Services/api';\nimport Questions from '../Components/Questions';\nimport '../Styles/global.css';\nimport { showButton as showBtnAction } from '../Actions';\n\nconst CryptoJS = require('crypto-js');\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionsInfo: [],\n      index: 0,\n      showButton: false\n    };\n    this.fetchQuestions = this.fetchQuestions.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n\n  componentWillUnmount() {\n    const _this$props = this.props,\n          name = _this$props.name,\n          score = _this$props.score,\n          email = _this$props.email;\n    const hashGerada = CryptoJS.MD5(email).toString();\n    const gravatarSrc = `https://www.gravatar.com/avatar/${hashGerada}`;\n    const ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n    ranking.push({\n      name,\n      score,\n      picture: gravatarSrc\n    });\n    return localStorage.setItem('ranking', JSON.stringify(ranking));\n  }\n\n  async fetchQuestions() {\n    const token = this.props.token;\n    const questionsInfo = await fetchQuestions(token);\n    this.setState({\n      questionsInfo\n    });\n  }\n\n  handleClick() {\n    const _this$state = this.state,\n          index = _this$state.index,\n          questionsInfo = _this$state.questionsInfo;\n    const history = this.props.history;\n    if (index < questionsInfo.length - 1) return this.usualNextClick();\n    return history.push('/feedback');\n  }\n\n  usualNextClick() {\n    const index = this.state.index;\n    const hideButton = this.props.hideButton;\n    this.setState({\n      index: index + 1\n    });\n    hideButton(this.state);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          questionsInfo = _this$state2.questionsInfo,\n          index = _this$state2.index;\n    const showButton = this.props.showButton;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, questionsInfo.filter((...info) => info[1] === index).map(question => React.createElement(Questions, {\n      key: index,\n      question: question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), showButton && React.createElement(\"button\", {\n      type: \"submit\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Pr\\xF3xima\")));\n  }\n\n}\n\nconst mapStateToProps = ({\n  trivia: {\n    token,\n    showButton,\n    points\n  },\n  user: {\n    email,\n    name\n  }\n}) => ({\n  token,\n  showButton,\n  score: points,\n  email,\n  name\n});\n\nconst mapDispatchToProps = dispatch => ({\n  hideButton: state => dispatch(showBtnAction(state))\n});\n\nTrivia.propTypes = {\n  token: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  showButton: PropTypes.bool.isRequired,\n  hideButton: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia); // https://stackoverflow.com/questions/16083919/push-json-objects-to-array-in-localstorage","map":{"version":3,"sources":["/home/bamberg/Trivia-Redux/src/Pages/Trivia.js"],"names":["React","PropTypes","connect","Header","fetchQuestions","Questions","showButton","showBtnAction","CryptoJS","require","Trivia","Component","constructor","props","state","questionsInfo","index","bind","handleClick","componentDidMount","componentWillUnmount","name","score","email","hashGerada","MD5","toString","gravatarSrc","ranking","JSON","parse","localStorage","getItem","push","picture","setItem","stringify","token","setState","history","length","usualNextClick","hideButton","render","filter","info","map","question","mapStateToProps","trivia","points","user","mapDispatchToProps","dispatch","propTypes","string","isRequired","shape","func","bool","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Header from '../Components/Header';\nimport { fetchQuestions } from '../Services/api';\nimport Questions from '../Components/Questions';\n\nimport '../Styles/global.css';\nimport { showButton as showBtnAction } from '../Actions';\n\nconst CryptoJS = require('crypto-js');\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questionsInfo: [],\n      index: 0,\n      showButton: false,\n    };\n\n    this.fetchQuestions = this.fetchQuestions.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n\n  componentWillUnmount() {\n    const { name, score, email } = this.props;\n    const hashGerada = CryptoJS.MD5(email).toString();\n    const gravatarSrc = (`https://www.gravatar.com/avatar/${hashGerada}`);\n\n    const ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n    ranking.push({ name, score, picture: gravatarSrc });\n    return localStorage.setItem('ranking', JSON.stringify(ranking));\n  }\n\n  async fetchQuestions() {\n    const { token } = this.props;\n\n    const questionsInfo = await fetchQuestions(token);\n\n    this.setState({\n      questionsInfo,\n    });\n  }\n\n  handleClick() {\n    const { index, questionsInfo } = this.state;\n    const { history } = this.props;\n    if (index < questionsInfo.length - 1) return this.usualNextClick();\n    return history.push('/feedback');\n  }\n\n  usualNextClick() {\n    const { index } = this.state;\n    const { hideButton } = this.props;\n    this.setState({ index: index + 1 });\n    hideButton(this.state);\n  }\n\n  render() {\n    const { questionsInfo, index } = this.state;\n    const { showButton } = this.props;\n\n    return (\n      <div>\n        <Header />\n        <main>\n          {\n            questionsInfo.filter((...info) => (\n              info[1] === index\n            )).map((question) => <Questions key={ index } question={ question } />)\n          }\n\n          { showButton && (\n            <button\n              type=\"submit\"\n              data-testid=\"btn-next\"\n              onClick={ this.handleClick }\n            >\n              Próxima\n            </button>) }\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  trivia: { token, showButton, points },\n  user: { email, name } }) => ({\n  token,\n  showButton,\n  score: points,\n  email,\n  name,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  hideButton: (state) => dispatch(showBtnAction(state)),\n});\n\nTrivia.propTypes = {\n  token: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  showButton: PropTypes.bool.isRequired,\n  hideButton: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n\n// https://stackoverflow.com/questions/16083919/push-json-objects-to-array-in-localstorage\n"]},"metadata":{},"sourceType":"module"}
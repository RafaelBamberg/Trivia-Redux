{"ast":null,"code":"import _objectSpread from \"/home/bamberg/Trivia-Redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/bamberg/Trivia-Redux/src/Components/Questions.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport WrongAnswers from './WrongAnswers';\nimport CorrectAnswer from './CorrectAnswer';\nimport { setTrivia, showButton } from '../Actions';\nimport getDifficulty from '../Services/functions';\nimport '../Styles/trivia.css';\n\nclass Questions extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      answered: false,\n      timer: 30,\n      assertionsAdd: 1,\n      showButton: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleCorrectBtn = this.handleCorrectBtn.bind(this);\n  }\n\n  componentDidMount() {\n    const ONE_SECOND = 1000;\n    this.interval = setInterval(() => this.setState(previousTime => ({\n      timer: previousTime.timer - 1\n    }), () => {\n      const _this$state = this.state,\n            timer = _this$state.timer,\n            answered = _this$state.answered;\n      const showNextButton = this.props.showNextButton;\n      const maximumTime = 0;\n\n      if (timer === maximumTime) {\n        clearInterval(this.interval);\n        this.setState({\n          answered: !answered\n        });\n        showNextButton(this.state);\n      }\n    }), ONE_SECOND);\n  }\n\n  componentDidUpdate() {\n    const _this$props = this.props,\n          name = _this$props.name,\n          score = _this$props.score,\n          email = _this$props.email,\n          assertions = _this$props.assertions;\n    const player = {\n      name,\n      score,\n      gravatarEmail: email,\n      assertions\n    };\n    localStorage.setItem('state', JSON.stringify({\n      player\n    }));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  handleClick(event) {\n    const answered = this.state.answered;\n    const showNextButton = this.props.showNextButton;\n    event.preventDefault();\n    this.setState({\n      answered: !answered\n    });\n    showNextButton(this.state);\n    clearInterval(this.interval);\n  }\n\n  handleCorrectBtn() {\n    const _this$state2 = this.state,\n          answered = _this$state2.answered,\n          timer = _this$state2.timer;\n    const _this$props2 = this.props,\n          savePoints = _this$props2.savePoints,\n          difficulty = _this$props2.question.difficulty;\n    this.setState({\n      answered: !answered\n    });\n    const multiplier = getDifficulty(difficulty);\n    const basePoints = 10;\n    savePoints(_objectSpread({}, this.state, {\n      points: basePoints + multiplier * timer\n    }));\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          answered = _this$state3.answered,\n          timer = _this$state3.timer;\n    const question = this.props.question;\n    const category = question.category,\n          correct = question.correct_answer,\n          incorrect = question.incorrect_answers,\n          difficulty = question.difficulty,\n          questionText = question.question;\n    const btnCorrectClass = answered ? 'correct-btn' : 'null';\n    const btnIncorrectClass = answered ? 'wrong-btn' : 'null';\n    const btnDisabled = !!answered;\n    return React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Tempo:\", timer), React.createElement(\"h1\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, category), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, questionText), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, difficulty), React.createElement(CorrectAnswer, {\n      correct: correct,\n      handleClick: this.handleCorrectBtn,\n      btnClass: btnCorrectClass,\n      disabled: btnDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), incorrect.map((answers, index) => React.createElement(WrongAnswers, {\n      key: index,\n      answers: answers,\n      index: index,\n      handleClick: this.handleClick,\n      btnClass: btnIncorrectClass,\n      disabled: btnDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n  }\n\n}\n\nQuestions.propTypes = {\n  question: PropTypes.shape().isRequired,\n  savePoints: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n  showNextButton: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = ({\n  user: {\n    email,\n    name\n  },\n  trivia: {\n    points,\n    assertions\n  }\n}) => ({\n  email,\n  name,\n  score: points,\n  assertions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  savePoints: state => dispatch(setTrivia(state)),\n  showNextButton: state => dispatch(showButton(state))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions); // https://www.youtube.com/watch?v=NAx76xx40jM\n// https://www.youtube.com/watch?v=sWKz9aLovjY\n// https://www.youtube.com/watch?v=RwlFyS1Rhew","map":{"version":3,"sources":["/home/bamberg/Trivia-Redux/src/Components/Questions.js"],"names":["React","PropTypes","connect","WrongAnswers","CorrectAnswer","setTrivia","showButton","getDifficulty","Questions","Component","constructor","state","answered","timer","assertionsAdd","handleClick","bind","handleCorrectBtn","componentDidMount","ONE_SECOND","interval","setInterval","setState","previousTime","showNextButton","props","maximumTime","clearInterval","componentDidUpdate","name","score","email","assertions","player","gravatarEmail","localStorage","setItem","JSON","stringify","componentWillUnmount","event","preventDefault","savePoints","difficulty","question","multiplier","basePoints","points","render","category","correct","correct_answer","incorrect","incorrect_answers","questionText","btnCorrectClass","btnIncorrectClass","btnDisabled","map","answers","index","propTypes","shape","isRequired","func","string","number","mapStateToProps","user","trivia","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport WrongAnswers from './WrongAnswers';\nimport CorrectAnswer from './CorrectAnswer';\nimport { setTrivia, showButton } from '../Actions';\nimport getDifficulty from '../Services/functions';\n\nimport '../Styles/trivia.css';\n\nclass Questions extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      answered: false,\n      timer: 30,\n      assertionsAdd: 1,\n      showButton: true,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleCorrectBtn = this.handleCorrectBtn.bind(this);\n  }\n\n  componentDidMount() {\n    const ONE_SECOND = 1000;\n    this.interval = setInterval(\n      () => this.setState((previousTime) => ({ timer: previousTime.timer - 1 }), () => {\n        const { timer, answered } = this.state;\n        const { showNextButton } = this.props;\n        const maximumTime = 0;\n        if (timer === maximumTime) {\n          clearInterval(this.interval);\n          this.setState({ answered: !answered });\n          showNextButton(this.state);\n        }\n      }),\n      ONE_SECOND,\n    );\n  }\n\n  componentDidUpdate() {\n    const { name, score, email, assertions } = this.props;\n    const player = { name, score, gravatarEmail: email, assertions };\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  handleClick(event) {\n    const { answered } = this.state;\n    const { showNextButton } = this.props;\n\n    event.preventDefault();\n    this.setState({ answered: !answered });\n    showNextButton(this.state);\n    clearInterval(this.interval);\n  }\n\n  handleCorrectBtn() {\n    const { answered, timer } = this.state;\n    const { savePoints, question: { difficulty } } = this.props;\n\n    this.setState({ answered: !answered });\n    const multiplier = (getDifficulty(difficulty));\n    const basePoints = 10;\n\n    savePoints({ ...this.state, points: basePoints + (multiplier * timer) });\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { answered, timer } = this.state;\n    const { question } = this.props;\n    const {\n      category,\n      correct_answer: correct,\n      incorrect_answers: incorrect,\n      difficulty,\n      question: questionText,\n    } = question;\n    const btnCorrectClass = answered ? 'correct-btn' : 'null';\n    const btnIncorrectClass = answered ? 'wrong-btn' : 'null';\n    const btnDisabled = !!answered;\n\n    return (\n      <main>\n        <p>\n          Tempo:\n          { timer }\n        </p>\n        <h1 data-testid=\"question-category\">{category}</h1>\n        <h2 data-testid=\"question-text\">{questionText}</h2>\n        <h3>{difficulty}</h3>\n        <CorrectAnswer\n          correct={ correct }\n          handleClick={ this.handleCorrectBtn }\n          btnClass={ btnCorrectClass }\n          disabled={ btnDisabled }\n        />\n        {\n          incorrect.map((\n            answers, index,\n          ) => (<WrongAnswers\n            key={ index }\n            answers={ answers }\n            index={ index }\n            handleClick={ this.handleClick }\n            btnClass={ btnIncorrectClass }\n            disabled={ btnDisabled }\n          />))\n        }\n      </main>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  question: PropTypes.shape().isRequired,\n  savePoints: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n  showNextButton: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = ({ user: { email, name }, trivia: { points, assertions } }) => ({\n  email,\n  name,\n  score: points,\n  assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  savePoints: (state) => dispatch(setTrivia(state)),\n  showNextButton: (state) => dispatch(showButton(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\n// https://www.youtube.com/watch?v=NAx76xx40jM\n// https://www.youtube.com/watch?v=sWKz9aLovjY\n// https://www.youtube.com/watch?v=RwlFyS1Rhew\n"]},"metadata":{},"sourceType":"module"}